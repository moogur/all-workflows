name: Pull request annotation (test, sonarqube)

on:
  workflow_call:
    inputs:
      skip_tests:
        description: "Skip pipeline tests"
        type: string
        required: false
        default: 'false'
      skip_sonar:
        description: "Skip pipeline sonar"
        type: string
        required: false
        default: 'false'
      sonar_sources:
        description: "Comma-separated paths to directories containing main source files"
        type: string
        required: false
        default: 'src'
      sonar_project_name:
        description: "Name of the project that will be displayed on the web interface"
        type: string
        required: false
        default: ''
      sonar_project_key:
        description: "The project's unique key"
        type: string
        required: false
        default: ''
      folder:
        description: "Working folder"
        type: string
        required: false
        default: '.'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.folder }}
  cancel-in-progress: true

jobs:
  scanner:
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Prepare working folder'
        if: "inputs.folder != '.'"
        run: cp -r ${{ inputs.folder }}/. .

      - name: 'Set go version'
        id: set-go-version
        run: |
          go_version=$(cat go.mod | grep "go[[:space:]]" | sed 's/.*[[:space:]]//')
          echo "go_version=$go_version" >> $GITHUB_OUTPUT

      - name: 'Setup go'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.set-go-version.outputs.go_version }}

      - name: Run golint
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint run ./... --out-format=checkstyle > report.xml

      - name: 'Set variables'
        if: "inputs.skip_sonar != 'true'"
        id: variables
        run: |
          raw_tag=`echo $(git describe --tags --abbrev=0)`
          echo "latest_tag=${raw_tag#v}" >> $GITHUB_OUTPUT

      - name: 'Sonarqube scanner'
        if: "inputs.skip_sonar != 'true'"
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: '.'
          args: >
            -Dsonar.branch.name=${{ github.ref_name }}
            -Dsonar.projectKey=${{ inputs.sonar_project_key }}
            -Dsonar.projectVersion="${{ steps.variables.outputs.latest_tag }}"
            -Dsonar.sources="${{ inputs.sonar_sources }}"
            -Dsonar.projectName="${{ inputs.sonar_project_name }}"
            -Dsonar.go.golangci-lint.reportPaths=report.xml

      # - name: 'Sonarqube pull request comment'
      #   if: "inputs.skip_sonar != 'true'"
      #   uses: moogur/sonarqube-pr-comment@master
      #   with:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_PROJECT_KEY: ${{ inputs.sonar_project_key }}
      #     GIT_BRANCH: ${{ github.head_ref }}
